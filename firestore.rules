
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isSuperRole() {
      return request.auth != null && getRole() in ['Super User', 'Super Admin'];
    }

    function isAdmin() {
      return request.auth != null && getRole() in ['Admin', 'Super User', 'Super Admin'];
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth.uid == userId; // Allow users to create their own account doc on signup
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    match /entities/{entityId} {
      allow read, write: if isAuthenticated();
    }

    match /leads/{leadId} {
      allow read, write: if isAuthenticated();
    }

    match /pipelineStages/{stageId} {
      allow read, write: if isAuthenticated();
    }

    match /automationRules/{ruleId} {
      allow read, write: if isAuthenticated();
    }

    match /auditLogs/{logId} {
      allow read: if isAuthenticated();
      // Allow any authenticated user to create a log entry
      allow create: if isAuthenticated();
      // Logs should be immutable, so no update or delete
      allow update, delete: if false;
    }

    match /settings/{docId} {
      // Allow any authenticated user to read settings (for logo on login page)
      allow read: if isAuthenticated();
      // Allow super roles to write/create settings
      allow write: if isSuperRole();
    }
  }
}
